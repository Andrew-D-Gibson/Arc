FALSE", label),
                Instr("LOAD_CONST", 9),
                Instr("STORE_NAME", "y"),
                label,
            ]
        )

        code = self.optimize_blocks(code)
        label = Label()
        self.check(
            code,
            Instr("LOAD_NAME", "x"),
            Instr("POP_JUMP_IF_TRUE", label),
            Instr("LOAD_CONST", 9),
            Instr("STORE_NAME", "y"),
            label,
        )

    def test_unconditional_jump_to_return(self):
        # def func():
        #     if test:
        #         if test2:
        #             x = 10
        #         else:
        #             x = 20
        #     else:
        #         x = 30

        label_instr11 = Label()
        label_instr14 = Label()
        label_instr7 = Label()
        code = Bytecode(
            [
                Instr("LOAD_GLOBAL", "test", lineno=2),
                Instr("POP_JUMP_IF_FALSE", label_instr11, lineno=2),
                Instr("LOAD_GLOBAL", "test2", lineno=3),
                Instr("POP_JUMP_IF_FALSE", label_instr7, lineno=3),
                Instr("LOAD_CONST", 10, lineno=4),
                Instr("STORE_FAST", "x", lineno=4),
                Instr("JUMP_ABSOLUTE", label_instr14, lineno=4),
                label_instr7,
                Instr("LOAD_CONST", 20, lineno=6),
                Instr("STORE_FAST", "x", lineno=6),
                Instr("JUMP_FORWARD", label_instr14, lineno=6),
                label_instr11,
                Instr("LOAD_CONST", 30, lineno=8),
                Instr("STORE_FAST", "x", lineno=8),
                label_instr14,
                Instr("LOAD_CONST", None, lineno=8),
                Instr("RETURN_VALUE", lineno=8),
            ]
        )

        label1 = Label()
        label3 = Label()
        label4 = Label()
        self.check(
            code,
            Instr("LOAD_GLOBAL", "test", lineno=2),
            Instr("POP_JUMP_IF_FALSE", label3, lineno=2),
            Instr("LOAD_GLOBAL", "test2", lineno=3),
            Instr("POP_JUMP_IF_FALSE", label1, lineno=3),
            Instr("LOAD_CONST", 10, lineno=4),
            Instr("STORE_FAST", "x", lineno=4),
            Instr("JUMP_ABSOLUTE", label4, lineno=4),
            label1,
            Instr("LOAD_CONST", 20, lineno=6),
            Instr("STORE_FAST", "x", lineno=6),
            Instr("JUMP_FORWARD", label4, lineno=6),
            label3,
            Instr("LOAD_CONST", 30, lineno=8),
            Instr("STORE_FAST", "x", lineno=8),
            label4,
            Instr("LOAD_CONST", None, lineno=8),
            Instr("RETURN_VALUE", lineno=8),
        )

    def test_unconditional_jumps(self):
        # def func():
        #     if x:
        #         if y:
        #             func()
        label_instr7 = Label()
        code = Bytecode(
            [
                Instr("LOAD_GLOBAL", "x", lineno=2),
                Instr("POP_JUMP_IF_FALSE", label_instr7, lineno=2),
                Instr("LOAD_GLOBAL", "y", lineno=3),
                Instr("POP_JUMP_IF_FALSE", label_instr7, lineno=3),
                Instr("LOAD_GLOBAL", "func", lineno=4),
                Instr("CALL_FUNCTION", 0, lineno=4),
                Instr("POP_TOP", lineno=4),
                label_instr7,
                Instr("LOAD_CONST", None, lineno=4),
                Instr("RETURN_VALUE", lineno=4),
            ]
        )

        label_return = Label()
        self.check(
            code,
            Instr("LOAD_GLOBAL", "x", lineno=2),
            Instr("POP_JUMP_IF_FALSE", label_return, lineno=2),
            Instr("LOAD_GLOBAL", "y", lineno=3),
            Instr("POP_JUMP_IF_FALSE", label_return, lineno=3),
            Instr("LOAD_GLOBAL", "func", lineno=4),
            Instr("CALL_FUNCTION", 0, lineno=4),
            Instr("POP_TOP", lineno=4),
            label_return,
            Instr("LOAD_CONST", None, lineno=4),
            Instr("RETURN_VALUE", lineno=4),
        )

    def test_jump_to_return(self):
        # def func(condition):
        #     return 'yes' if condition else 'no'
        label_instr4 = Label()
        label_instr6 = Label()
        code = Bytecode(
            [
                Instr("LOAD_FAST", "condition"),
                Instr("POP_JUMP_IF_FALSE", label_instr4),
                Instr("LOAD_CONST", "yes"),
                Instr("JUMP_FORWARD", label_instr6),
                label_instr4,
                Instr("LOAD_CONST", "no"),
                label_instr6,
                Instr("RETURN_VALUE"),
            ]
        )

        label = Label()
        self.check(
            code,
            Instr("LOAD_FAST", "condition"),
            Instr("POP_JUMP_IF_FALSE", label),
            Instr("LOAD_CONST", "yes"),
            Instr("RETURN_VALUE"),
            label,
            Instr("LOAD_CONST", "no"),
            Instr("RETURN_VALUE"),
        )

    def test_jump_if_true_to_jump_if_false(self):
        # Replace JUMP_IF_TRUE_OR_POP jumping to POP_JUMP_IF_FALSE <target>
        # with POP_JUMP_IF_TRUE <offset after the second POP_JUMP_IF_FALSE>
        #
        #     if x or y:
        #         z = 1

        label_instr3 = Label()
        label_instr7 = Label()
        code = Bytecode(
            [
                Instr("LOAD_NAME", "x"),
                Instr("JUMP_IF_TRUE_OR_POP", label_instr3),
                Instr("LOAD_NAME", "y"),
                label_instr3,
                Instr("POP_JUMP_IF_FALSE", label_instr7),
                Instr("LOAD_CONST", 1),
                Instr("STORE_NAME", "z"),
                label_instr7,
                Instr("LOAD_CONST", None),
                Instr("RETURN_VALUE"),
            ]
        )

        label_instr4 = Label()
        label_instr7 = Label()
        self.check(
            code,
            Instr("LOAD_NAME", "x"),
            Instr("POP_JUMP_IF_TRUE", label_instr4),
            Instr("LOAD_NAME", "y"),
            Instr("POP_JUMP_IF_FALSE", label_instr7),
            label_instr4,
            Instr("LOAD_CONST", 1),
            Instr("STORE_NAME", "z"),
            label_instr7,
            Instr("LOAD_CONST", None),
            Instr("RETURN_VALUE"),
        )

    def test_jump_if_false_to_jump_if_false(self):
        # Replace JUMP_IF_FALSE_OR_POP jumping to POP_JUMP_IF_FALSE <label>
        # with POP_JUMP_IF_FALSE <label>
        #
        #     while n > 0 and start > 3:
        #         func()
        if sys.version_info < (3, 8):
            label_instr1 = Label()
            label_instr15 = Label()
            label_instr17 = Label()
            label_instr9 = Label()
            code = Bytecode(
                [
                    Instr("SETUP_LOOP", label_instr17),
                    label_instr1,
                    Instr("LOAD_NAME", "n"),
                    Instr("LOAD_CONST", 0),
                    Instr("COMPARE_OP", Compare.GT),
                    # JUMP_IF_FALSE_OR_POP jumps to POP_JUMP_IF_FALSE
                    # which jumps to label_instr15
                    Instr("JUMP_IF_FALSE_OR_POP", label_instr9),
                    Instr("LOAD_NAME", "start"),
                    Instr("LOAD_CONST", 3),
                    Instr("COMPARE_OP", Compare.GT),
                    label_instr9,
                    Instr("POP_JUMP_IF_FALSE", label_instr15),
                    Instr("LOAD_NAME", "func"),
                    Instr("CALL_FUNCTION", 0),
                    Instr("POP_TOP"),
                    Instr("JUMP_ABSOLUTE", label_instr1),
                    label_instr15,
     