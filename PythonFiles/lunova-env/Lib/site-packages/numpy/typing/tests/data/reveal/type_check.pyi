span>
                  </div>
                </div>
              </div>
              <div class="subsection">
                <h3>Description</h3>
                <p>Struct used to set up an overlap capsule command to be performed asynchronously during a job.</p>
              </div>
              <div class="subsection">
        <p>When you use this struct to schedule a batch of overlap capsule commands, the commands are performed asynchronously. The results of the overlap capsule are written to the results buffer. Because the results are written asynchronously, the results buffer can't be accessed until the job is complete.<br /><br />The results for a command at index N in the command buffer are stored at index N * maxHits in the results buffer.<br /><br />If maxHits is larger than the actual number of results for the command the result buffer will contain some invalid results which did not hit anything. The first invalid result is identified by the collider instance ID being 0. The second and later invalid results are not written to the overlap capsule command so their collider instance IDs are not guaranteed to be 0. When iterating over the results the loop should stop when the first invalid result is found.<br /><br />Overlap capsule command also controls whether or not Trigger colliders generate a hit. You should adjust maxHits and result array size accordingly to store all hits. Use QueryParameters to control hit flags. <a href="QueryParameters-hitBackfaces.html">QueryParameters.hitBackfaces</a> and <a href="QueryParameters-hitMultipleFaces.html">QueryParameters.hitMultipleFaces</a> flags are not supported and wonâ€™t have any impact on overlap results.<br /><br />Note: Only BatchQuery.ExecuteOverlapCapsuleJob is logged into the profiler. Query count information is not logged.<br /><br />See Also: <a href="Physics.OverlapCapsule.html">Physics.OverlapCapsule</a>, <a href="ColliderHit.html">ColliderHit</a>.</p>
      </div>
              <div class="subsection">
        <pre class="codeExampleCS">
using Unity.Collections;
using UnityEngine;<br /><br />public class CapsuleOverlap : <a href="MonoBehaviour.html">MonoBehaviour</a>
{
    //Print iname of GameObjects inside the capsule
    void BatchOverlapCapsule()
    {
        var commands = new NativeArray&lt;<a href="OverlapCapsuleCommand.html">OverlapCapsuleCommand</a>&gt;(1, <a href="Unity.Collections.Allocator.TempJob.html">Allocator.TempJob</a>);
        var results = new NativeArray&lt;<a href="ColliderHit.html">ColliderHit</a>&gt;(3, <a href="Unity.Collections.Allocator.TempJob.html">Allocator.TempJob</a>);<br /><br />        commands[0] = new <a href="OverlapCapsuleCommand.html">OverlapCapsuleCommand</a>(<a href="Vector3-zero.html">Vector3.zero</a>, <a href="Vector3-one.html">Vector3.one</a>, 10f, <a href="QueryParameters.Default.html">QueryParameters.Default</a>);<br /><br />        <a href="OverlapCapsuleCommand.ScheduleBatch.html">OverlapCapsuleCommand.ScheduleBatch</a>(commands, results, 1, 3).Complete();<br /><br />        foreach (var hit in results)
            <a href="Debug.Log.html">Debug.L